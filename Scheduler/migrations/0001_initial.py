# Generated by Django 4.2 on 2024-04-09 01:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('restaurant_id', models.AutoField(primary_key=True, serialize=False)),
                ('restaurant_name', models.CharField(max_length=100)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('zip', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('Mo', 'Monday'), ('Tu', 'Tuesday'), ('We', 'Wednesday'), ('Th', 'Thursday'), ('Fr', 'Friday'), ('Sa', 'Saturday'), ('Su', 'Sunday')], max_length=2)),
                ('shift_type', models.CharField(choices=[('open', 'Open'), ('mid', 'Mid'), ('close', 'Close')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('EMPLOYEE', 'Employee'), ('MANAGER', 'Manager')], max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('restaurant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='Scheduler.restaurant')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('score1', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('score2', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('score3', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('score4', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('score5', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('average_score', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Scheduler.shift')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Scheduler.employee')),
            ],
        ),
        migrations.CreateModel(
            name='TimeOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mondayBegin', models.CharField(blank=True, max_length=10, verbose_name='mondayBegin')),
                ('mondayEnd', models.CharField(blank=True, max_length=10, verbose_name='mondayEnd')),
                ('tuesdayBegin', models.CharField(blank=True, max_length=10, verbose_name='tuesdayBegin')),
                ('tuesdayEnd', models.CharField(blank=True, max_length=10, verbose_name='tuesdayEnd')),
                ('wednesdayBegin', models.CharField(blank=True, max_length=10, verbose_name='wednesdayBegin')),
                ('wednesdayEnd', models.CharField(blank=True, max_length=10, verbose_name='wednesdayEnd')),
                ('thursdayBegin', models.CharField(blank=True, max_length=10, verbose_name='thursdayBegin')),
                ('thursdayEnd', models.CharField(blank=True, max_length=10, verbose_name='thursdayEnd')),
                ('fridayBegin', models.CharField(blank=True, max_length=10, verbose_name='fridayBegin')),
                ('fridayEnd', models.CharField(blank=True, max_length=10, verbose_name='fridayEnd')),
                ('saturdayBegin', models.CharField(blank=True, max_length=10, verbose_name='saturdayBegin')),
                ('saturdayEnd', models.CharField(blank=True, max_length=10, verbose_name='saturdayEnd')),
                ('sundayBegin', models.CharField(blank=True, max_length=10, verbose_name='sundayBegin')),
                ('sundayEnd', models.CharField(blank=True, max_length=10, verbose_name='sundayEnd')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Scheduler.employee')),
            ],
        ),
        migrations.AddField(
            model_name='shift',
            name='employees',
            field=models.ManyToManyField(related_name='shifts', through='Scheduler.EmployeeShift', to='Scheduler.employee'),
        ),
    ]
